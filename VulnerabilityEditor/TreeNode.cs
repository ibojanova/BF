using BugsFramework;
using VulnerabilityDescription;

/*@author Irena Bojanova(ivb)
 *@date - 2/27/2022 */

namespace VulnerabilityEditor
{
    //adds new members to hold the Weakness object and Bug/Weakness/Fault flag about the weakness type
    public class TreeNodeWeakness : TreeNode
    {
        public Weakness Weakness = new();
        public readonly BWF TypeBWF;

        public TreeNodeWeakness(Weakness weakness, BWF typeBWF) : base(weakness.Class)
        {
            TypeBWF = typeBWF;
            SetWeakness(weakness);
        }

        public void SetWeakness(Weakness weakness)
        {
            Weakness = weakness;
            Name = Text = weakness.Class;
        }
    }

    //adds new members to hold the Comment and an Unable/Disable flag to change color of node text
    public class TreeNodeX : TreeNode
    {
        public string? Comment;
        public readonly bool Disabled;

        public TreeNodeX(string id, string? toolTip, bool disable = false) 
            : this(id, toolTip, Enumerable.Empty<TreeNode>(), disable) { }
        public TreeNodeX(string id, string? toolTip, IEnumerable<TreeNode> children, bool disable = false) 
            : base(id, children.ToArray())
        {
            (Name, ToolTipText) = (id, toolTip);
            if (Disabled = disable) ForeColor = SystemColors.GrayText; else Expand();
        }

        public IEnumerable<TreeNodeX> SubNodes => Nodes.OfType<TreeNodeX>();
    }

    public static class TreeViewExtensions
    {
        public static void SetNodes(this TreeView treeView, IEnumerable<TreeNode> nodes)
        {
            treeView.Nodes.Clear();
            treeView.Nodes.AddRange(nodes.ToArray());
        }

        public static IEnumerable<T> SubNodes<T> (this TreeView treeView) where T : TreeNode => treeView.Nodes.OfType<T>();

        public static bool SelectByName(this TreeView treeView, string name, string? comment = null)
        {
            var node = treeView.Nodes.Find(name, true).FirstOrDefault();
            if (node is TreeNodeX xNode)
            {
                xNode.Comment = comment;
                treeView.SelectedNode = xNode.Disabled ? null : node;
            }
            else treeView.SelectedNode = node;
            return node is not null;
        }

        public static bool HasChildren(this TreeNode? node) => (node?.Nodes.Count ?? 0) > 0;

        public static void KeepSelectionColor(this TreeView treeView)
        {
            treeView.DrawMode = TreeViewDrawMode.OwnerDrawText;
            treeView.DrawNode += (sender, e) =>
            {
                if (e.State.HasFlag(TreeNodeStates.Selected))
                {
                    e.Graphics.FillRectangle(Brushes.Blue, e.Node!.Bounds);
                    Font nodeFont = e.Node.NodeFont;
                    if ((nodeFont == null) && (sender is TreeView treeView))
                        nodeFont = treeView.Font;
                    e.Graphics.DrawString(e.Node.Text, nodeFont!, Brushes.White, Rectangle.Inflate(e.Bounds, 2, 0));
                }
                else
                    e.DrawDefault = true;

                if (e.State.HasFlag(TreeNodeStates.Focused))
                {
                    using (Pen focusPen = new Pen(Color.Black))
                    {
                        focusPen.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot;
                        Rectangle focusBounds = e.Node!.Bounds;
                        focusBounds.Size = new Size(focusBounds.Width - 1, focusBounds.Height - 1);
                        e.Graphics.DrawRectangle(focusPen, focusBounds);
                    }
                }
            };
        }
    }

}
