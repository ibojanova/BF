using System.Drawing;
using System.Windows.Forms;

/*@author Irena Bojanova(ivb)
 *@date - 2/9/2022 */

namespace VulnerabilityEditor
{
    public static class UITools
    {
        static void SelectionBlue(object? sender, DrawTreeNodeEventArgs e)
        {
            if ((e.State & TreeNodeStates.Selected) != 0)
            {
                e.Graphics.FillRectangle(Brushes.Blue, e.Node!.Bounds);
                Font nodeFont = e.Node.NodeFont;
                if ((nodeFont == null) && (sender is TreeView treeView))
                    nodeFont = treeView.Font;
                e.Graphics.DrawString(e.Node.Text, nodeFont!, Brushes.White, Rectangle.Inflate(e.Bounds, 2, 0));
            }
            else
                e.DrawDefault = true;
            if ((e.State & TreeNodeStates.Focused) != 0)
            {
                using (Pen focusPen = new Pen(Color.Black))
                {
                    focusPen.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot;
                    Rectangle focusBounds = e.Node!.Bounds;
                    focusBounds.Size = new Size(focusBounds.Width - 1, focusBounds.Height - 1);
                    e.Graphics.DrawRectangle(focusPen, focusBounds);
                }
            }
        }

        public static void KeepSelectionColor(this TreeView treeView)
        {
            treeView.DrawMode = TreeViewDrawMode.OwnerDrawText;
            treeView.DrawNode += new DrawTreeNodeEventHandler(SelectionBlue);
        }

        /*public static void MoveSelection(this TreeView treeView, bool up)
        {
            if (treeView.SelectedNode is not TreeNode node) return;

            var siblings = node.Parent?.Nodes ?? treeView.Nodes;
            node.Remove();
            siblings.Insert(node.Index + (up ? -1 : 1), node);
        }*/

        /*public static AnyControl? Find<AnyControl>(this Control peer, bool next) where AnyControl : Control
        {
            var forward = next ? 1 : -1;
            return peer.Parent.Controls.OfType<AnyControl>()
                .Where(t => (t.TabIndex - peer.TabIndex) * forward > 0)
                .OrderBy(t => t.TabIndex * forward)
                .FirstOrDefault();
        }*/

    }
}
